---
title: "Homework 4"
author: "[Ann DeFrancesco]{style='background-color: yellow;'}"
toc: true
title-block-banner: true
title-block-style: default
format: html
# format: pdf
---

---

::: {.callout-important style="font-size: 0.8em;"}

Please read the instructions carefully before submitting your assignment.

1. This assignment requires you to only upload a `PDF` file on Canvas
1. Don't collapse any code cells before submitting. 
1. Remember to make sure all your code output is rendered properly before uploading your submission.

⚠️ Please add your name to the author information in the frontmatter before submitting your assignment ⚠️
:::


We will be using the following libraries:

```{R}
packages <- c(
  "dplyr", 
  "readr", 
  "tidyr", 
  "purrr", 
  "stringr", 
  "corrplot", 
  "car", 
  "caret", 
  "torch", 
  "nnet", 
  "broom",
  "numDeriv"
)

# renv::install(packages)
sapply(packages, require, character.only=T)
```

<br><br><br><br>
---

## Question 1
::: {.callout-tip}
## 30 points
Automatic differentiation using `torch`
:::

###### 1.1 (5 points)

Consider $g(x, y)$ given by
$$
g(x, y) = (x - 3)^2 + (y - 4)^2.
$$

Using elementary calculus derive the expressions for

$$
\frac{d}{dx}g(x, y), \quad \text{and} \quad \frac{d}{dy}g(x, y).
$$

Using your answer from above, what is the answer to
$$
\frac{d}{dx}g(x, y) \Bigg|_{(x=3, y=4)} \quad \text{and} \quad \frac{d}{dy}g(x, y) \Bigg|_{(x=3, y=4)} ?
$$

Define $g(x, y)$ as a function in R, compute the gradient of $g(x, y)$ with respect to $x=3$ and $y=4$. Does the answer match what you expected? Yes
```{R}
function1 <- function(x,y){
  ((x - 3)^2) - ((y - 4)^2)
}

partial_x <- function(x, y) {
  2 * (x - 3)
}

partial_y <- function(x, y) {
  2 * (y - 4)
}

c(partial_x(3, 4), partial_y(3,4))
```


---

###### 1.2 (10 points)


$$
\newcommand{\u}{\boldsymbol{u}}\newcommand{\v}{\boldsymbol{v}}
$$

Consider $h(\u, \v)$ given by
$$
h(\u, \v) = (\u \cdot \v)^3,
$$
where $\u \cdot \v$ denotes the dot product of two vectors, i.e., $\u \cdot \v = \sum_{i=1}^n u_i v_i.$

Using elementary calculus derive the expressions for the gradients

$$
\begin{aligned}
\nabla_\u h(\u, \v) &= \Bigg(\frac{d}{du_1}h(\u, \v), \frac{d}{du_2}h(\u, \v), \dots, \frac{d}{du_n}h(\u, \v)\Bigg)
\end{aligned}
$$

Using your answer from above, what is the answer to $\nabla_\u h(\u, \v)$ when $n=10$ and

$$
\begin{aligned}
\u = (-1, +1, -1, +1, -1, +1, -1, +1, -1, +1)\\
\v = (-1, -1, -1, -1, -1, +1, +1, +1, +1, +1)
\end{aligned}
$$

Define $h(\u, \v)$ as a function in R, initialize the two vectors $\u$ and $\v$ as `torch_tensor`s. Compute the gradient of $h(\u, \v)$ with respect to $\u$. Does the answer match what you expected?
```{R}
function2 <- function(u, v) {
  dot_product <- sum(u * v)
  cubed_dot_product <- dot_product ^ 3
  gradient <- numeric(length(u))
  
  for (i in 1:length(u)) {
    gradient[i] <- 3 * cubed_dot_product * v[i]
  }
  return(gradient)
}

u = c(-1, +1, -1, +1, -1, +1, -1, +1, -1, +1)
v = c(-1, -1, -1, -1, -1, +1, +1, +1, +1, +1)

cat("gradient:", function2(u, v))
```

---

###### 1.3 (5 points)

Consider the following function
$$
f(z) = z^4 - 6z^2 - 3z + 4
$$

Derive the expression for 
$$
f'(z_0) = \frac{df}{dz}\Bigg|_{z=z_0}
$$
and evaluate $f'(z_0)$ when $z_0 = -3.5$.

Define $f(z)$ as a function in R, and using the `torch` library compute $f'(-3.5)$. 
```{R}
function3 <- function(z) {
  (4 * z ^ 3) - (12 * z) - (3)
}

cat("f(z):", function3(-3.5))
```


---

###### 1.4 (5 points)

For the same function $f$, initialize $z[1] = -3.5$, and perform $n=100$ iterations of **gradient descent**, i.e., 

> $z[{k+1}] = z[k] - \eta f'(z[k]) \ \ \ \ $ for $k = 1, 2, \dots, 100$

Plot the curve $f$ and add taking $\eta = 0.02$, add the points $\{z_0, z_1, z_2, \dots z_{100}\}$ obtained using gradient descent to the plot. What do you observe?

```{R}
function4 <- function(z) {
  (z ^ 4) - (6 * z ^ 2) - (3 * z) + 4
}

z1 <- 3.5
eta1 <- 0.02
n1 <- 100

z_values <- numeric(n1 + 1)
z_values[1] <- z1

for (i in 1:n1) {
  z1 <- z1 - eta1 * function3(z1)
  z_values[i + 1] <- z1
}

curve(function4, from = -4, to = 3, xlab = "z", ylab = "f(z)", main = "Gradient Descent on f(z)")
points(z_values, function4(z_values))
```


---

###### 1.5 (5 points)


Redo the same analysis as **Question 1.4**, but this time using $\eta = 0.03$. What do you observe? What can you conclude from this analysis
```{R}
z2 <- -3.5
eta2 <- 0.03
n2 <- 100

z_values <- numeric(n2 + 1)
z_values[1] <- z2

for (i in 1:n2) {
  z2 <- z2 - eta2 * function3(z2)
  z_values[i + 1] <- z2
}

curve(function4, from = -4, to = -3, xlab = "z", ylab = "f(z)", main = "Gradient Descent on f(z)")
points(z_values, function4(z_values))
```




<br><br><br><br>
<br><br><br><br>
---

## Question 2
::: {.callout-tip}
## 50 points
Logistic regression and interpretation of effect sizes
:::

For this question we will use the **Titanic** dataset from the Stanford data archive. This dataset contains information about passengers aboard the Titanic and whether or not they survived. 


---

###### 2.1 (5 points)

Read the data from the following URL as a tibble in R. Preprocess the data such that the variables are of the right data type, e.g., binary variables are encoded as factors, and convert all column names to lower case for consistency. Let's also rename the response variable `Survival` to `y` for convenience.

```{R}
url <- "https://web.stanford.edu/class/archive/cs/cs109/cs109.1166/stuff/titanic.csv"

df <- read.csv(url, header = TRUE)

titanic_data <- df %>%
  mutate(Survived = factor(Survived),
         Sex = factor(Sex),
         Pclass = factor(Pclass),
         Siblings.Spouses.Aboard = as.factor(Siblings.Spouses.Aboard),
         Parents.Children.Aboard = as.factor(Parents.Children.Aboard),
         Age = as.numeric(Age),
         Fare = as.numeric(Fare), ) %>%
  rename(y = Survived)
str(titanic_data)
```

---

###### 2.2 (5 points)

Visualize the correlation matrix of all numeric columns in `df` using `corrplot()`

```{R}
df %>% select_if(is.numeric) %>% 
  cor() %>%
  corrplot(method = "color")
```



---

###### 2.3 (10 points)

Fit a logistic regression model to predict the probability of surviving the titanic as a function of:

* `pclass`
* `sex`
* `age`
* `fare`
* `# siblings`
* `# parents`


```{R}
full_model <- glm(
  y ~ Pclass + Sex + Age + Fare + Siblings.Spouses.Aboard + Parents.Children.Aboard,
  data = titanic_data,
  family = binomial(link = "logit")
)
summary(full_model)
```

---

###### 2.4 (30 points)

Provide an interpretation for the slope and intercept terms estimated in `full_model` in terms of the log-odds of survival in the titanic and in terms of the odds-ratio (if the covariate is also categorical).

the intercept in full_model represents the odds of survival. the slope indicates the change in odds of survival for different categories. 

::: {.callout-hint}
## 
Recall the definition of logistic regression from the lecture notes, and also recall how we interpreted the slope in the linear regression model (particularly when the covariate was categorical).
:::


<br><br><br><br>
<br><br><br><br>
---

## Question 3
::: {.callout-tip}
## 70 points

Variable selection and logistic regression in `torch`

:::


---

###### 3.1 (15 points)

Complete the following function `overview` which takes in two categorical vectors (`predicted` and `expected`) and outputs:

* The prediction accuracy
* The prediction error
* The false positive rate, and
* The false negative rate

```{R}
overview <- function(predicted, expected){
    confusion_matrix <- table(expected, predicted)
    accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
    error <- 1 - accuracy
    total_false_positives <- confusion_matrix[1, 2]
    total_true_positives <- confusion_matrix[2, 2]
    total_false_negatives <- confusion_matrix[2, 1]
    total_true_negatives <- confusion_matrix[1, 1]
    false_positive_rate <- total_false_positives / (total_false_positives + total_true_negatives)
    false_negative_rate <- total_false_negatives / (total_false_negatives + total_true_positives)
    return(
        data.frame(
            accuracy = 100 * accuracy, 
            error=error, 
            false_positive_rate = false_positive_rate, 
            false_negative_rate = false_negative_rate
        )
    )
}
```

You can check if your function is doing what it's supposed to do by evaluating

```{R}
overview(titanic_data$y, titanic_data$y)
```
and making sure that the accuracy is $100\%$ while the errors are $0\%$.
---

###### 3.2 (5 points)

Display an overview of the key performance metrics of `full_model`

```{R}
predicted <- ifelse(predict(full_model, type = "response") > 0.5, 1, 0)
expected <- as.numeric(as.character(titanic_data$y))
overview(predicted, expected)
```

---

###### 3.3  (5 points)

Using backward-stepwise logistic regression, find a parsimonious altenative to `full_model`, and print its `overview`

```{R}
step_model <- step(full_model, direction = "backward") 
summary(step_model)
```

```{R}
step_predictions <- ifelse(predict(step_model, type = "response") > 0.5, 1, 0)
overview(step_predictions, as.numeric(as.character(titanic_data$y)))
```

---

###### 3.4  (15 points)

Using the `caret` package, setup a **$5$-fold cross-validation** training method using the `caret::trainConrol()` function

```{R}
controls <- trainControl(method = "cv", number = 5) 
```

Now, using `control`, perform $5$-fold cross validation using `caret::train()` to select the optimal $\lambda$ parameter for LASSO with logistic regression. 

Take the search grid for $\lambda$ to be in $\{ 2^{-20}, 2^{-19.5}, 2^{-19}, \dots, 2^{-0.5}, 2^{0} \}$.

```{R}
controls <- trainCOntrol(
  method = "cv",
  number = 5
)

lasso_fit <- train(
  x = as.matrix(select(titanic_data, -y)),
  y = titanic_data$y,
  method = "glmnet",
  trControl = controls, 
  tuneGrid = expand.grid(
    alpha = 1,
    lambda = 2^seq(-20, 0, by = 0.5)
    ),
  family = "binomial"
)
```
Using the information stored in `lasso_fit$results`, plot the results for  cross-validation accuracy vs. $log_2(\lambda)$. Choose the optimal $\lambda^*$, and report your results for this value of $\lambda^*$.

```{R}
plot(lasso_fit$results$lambda, lasso_fit$results$Accuracy, type = "b",
     xlab = expression(log[2](lambda)), ylab = "Cross-validation Accuracy",
     main = "Cross-validation Accuracy vs log2(lambda)")

cat("Optimal lambda:", which.max(lasso_fit$results$Accuracy), "\n")
cat("Cross validation accuracy with optimal lambda", lasso_fit$results$lambda[optimal_lambda_index])
```

---

###### 3.5  (25 points)

First, use the `model.matrix()` function to convert the covariates of `df` to a matrix format

```{R}
covariate_matrix <- model.matrix(full_model)[, -1]
```

Now, initialize the covariates $X$ and the response $y$ as `torch` tensors

```{R}
X <- torch_tensor(covariate_matrix, dtype = torch_float32())
y <- torch_tensor(as.numeric(as.character(df$y)) - 1, dtype = torch_float32())
```

Using the `torch` library, initialize an `nn_module` which performs logistic regression for this dataset. (Remember that we have 6 different covariates)

```{R}
logistic <- nn_module(
  initialize = function(input_size) {
    self$linear <- nn_linear(input_size, 1)
  },
  forward = function(x) {
    logits <- self$linear(x)
    probabilities <- torch_sigmoid(logits)
  }
)

f <- logistic(6)
```

You can verify that your code is right by checking that the output to the following code is a vector of probabilities:

```{R}
f(X)
```


Now, define the loss function `Loss()` which takes in two tensors `X` and `y` and a function `Fun`, and outputs the **Binary cross Entropy loss** between `Fun(X)` and `y`. 

```{R}
Loss <- function(X, y, Fun){
  predictions <- Fun(X)
  torch_binary_cross_entropy(predictions, y)
}
```

Initialize an optimizer using `optim_adam()` and perform $n=1000$ steps of gradient descent in order to fit logistic regression using `torch`.

```{R}
f <- logistic()
optimizer <- optim_adam(f$parameters(), lr = 0.01) 

n <- 1000
for (i in 1:n) {
  predictions <- f(X)
  loss <- Loss(predictions, y)
  loss$backward()
  optimizer$step()
  if (i %% 100 == 0) {
    cat("Step:", i, "Loss:", as.numeric(loss$data))
  }
}
```

Using the final, optimized parameters of `f`, compute the compute the predicted results on `X`

```{R}
predicted_probabilities <- f(X) %>% as_array()
torch_predictions <- ifelse(predicted_probabilities > 0.5, 1, 0)

overview(torch_predictions, df$y)
```

---

###### 3.6  (5 points)

Create a summary table of the `overview()` summary statistics for each of the $4$ models we have looked at in this assignment, and comment on their relative strengths and drawbacks. 


:::{.hidden unless-format="pdf"}
\pagebreak
:::

<br><br><br><br>
<br><br><br><br>
---



::: {.callout-note collapse="true"}
## Session Information

Print your `R` session information using the following command

```{R}
sessionInfo()
```
:::